{"version":3,"sources":["../src/s3PackageManager.ts"],"names":["pkgFileName","S3PackageManager","constructor","config","packageName","logger","endpoint","region","s3ForcePathStyle","accessKeyId","secretAccessKey","sessionToken","tarballACL","acl","s3","S3","trace","packageAccess","getMatchedPackagesSpec","storage","packageCustomFolder","packagePath","keyPrefix","updatePackage","name","updateHandler","onWrite","transformPackage","onEnd","debug","json","_getData","err","error","transformedPackage","Promise","resolve","reject","getObject","Bucket","bucket","Key","response","message","body","Body","toString","data","JSON","parse","e","deletePackage","fileName","callback","deleteObject","removePackage","Prefix","createPackage","value","headObject","s3Err","savePackage","putObject","stringify","ACL","readPackage","writeTarball","uploadStream","UploadTarball","streamEnded","on","baseS3Params","convertedErr","emit","managedUpload","upload","Object","assign","promise","send","done","abort","readTarball","readTarballStream","ReadTarball","request","headersSent","readStream","statusCode","headers","HTTP_STATUS","NOT_FOUND","HEADERS","CONTENT_LENGTH","contentLength","parseInt","createReadStream","pipe","destroy"],"mappings":"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","sourcesContent":["import { S3, AWSError } from 'aws-sdk';\nimport { UploadTarball, ReadTarball } from '@verdaccio/streams';\nimport { HEADERS, HTTP_STATUS, VerdaccioError } from '@verdaccio/commons-api';\nimport { Callback, Logger, Package, ILocalPackageManager, CallbackAction, ReadPackageCallback } from '@verdaccio/types';\nimport { HttpError } from 'http-errors';\n\nimport { is404Error, convertS3Error, create409Error } from './s3Errors';\nimport { deleteKeyPrefix } from './deleteKeyPrefix';\nimport { S3Config } from './config';\nimport addTrailingSlash from './addTrailingSlash';\n\nconst pkgFileName = 'package.json';\n\nexport default class S3PackageManager implements ILocalPackageManager {\n  public config: S3Config;\n  public logger: Logger;\n  private readonly packageName: string;\n  private readonly s3: S3;\n  private readonly packagePath: string;\n  private readonly tarballACL: string;\n  private readonly acl: string;\n\n  public constructor(config: S3Config, packageName: string, logger: Logger) {\n    this.config = config;\n    this.packageName = packageName;\n    this.logger = logger;\n    const { endpoint, region, s3ForcePathStyle, accessKeyId, secretAccessKey, sessionToken, tarballACL, acl } = config;\n    this.tarballACL = tarballACL || 'private';\n    this.acl = acl || 'private';\n\n    this.s3 = new S3({ endpoint, region, s3ForcePathStyle, accessKeyId, secretAccessKey, sessionToken });\n    this.logger.trace({ packageName }, 's3: [S3PackageManager constructor] packageName @{packageName}');\n    this.logger.trace({ endpoint }, 's3: [S3PackageManager constructor] endpoint @{endpoint}');\n    this.logger.trace({ region }, 's3: [S3PackageManager constructor] region @{region}');\n    this.logger.trace({ s3ForcePathStyle }, 's3: [S3PackageManager constructor] s3ForcePathStyle @{s3ForcePathStyle}');\n    this.logger.trace({ acl }, 's3: [S3PackageManager constructor] acl @{acl}');\n    this.logger.trace({ tarballACL }, 's3: [S3PackageManager constructor] tarballACL @{tarballACL}');\n    this.logger.trace({ accessKeyId }, 's3: [S3PackageManager constructor] accessKeyId @{accessKeyId}');\n    this.logger.trace({ secretAccessKey }, 's3: [S3PackageManager constructor] secretAccessKey @{secretAccessKey}');\n    this.logger.trace({ sessionToken }, 's3: [S3PackageManager constructor] sessionToken @{sessionToken}');\n\n    const packageAccess = this.config.getMatchedPackagesSpec(packageName);\n    if (packageAccess) {\n      const storage = packageAccess.storage;\n      const packageCustomFolder = addTrailingSlash(storage);\n      this.packagePath = `${this.config.keyPrefix}${packageCustomFolder}${this.packageName}`;\n    } else {\n      this.packagePath = `${this.config.keyPrefix}${this.packageName}`;\n    }\n  }\n\n  public updatePackage(\n    name: string,\n    updateHandler: Callback,\n    onWrite: Callback,\n    transformPackage: Function,\n    onEnd: Callback\n  ): void {\n    this.logger.debug({ name }, 's3: [S3PackageManager updatePackage init] @{name}');\n    (async (): Promise<any> => {\n      try {\n        const json = await this._getData();\n        updateHandler(json, err => {\n          if (err) {\n            this.logger.error({ err }, 's3: [S3PackageManager updatePackage updateHandler onEnd] @{err}');\n            onEnd(err);\n          } else {\n            const transformedPackage = transformPackage(json);\n            this.logger.debug(\n              { transformedPackage },\n              's3: [S3PackageManager updatePackage updateHandler onWrite] @{transformedPackage}'\n            );\n            onWrite(name, transformedPackage, onEnd);\n          }\n        });\n      } catch (err) {\n        this.logger.error({ err }, 's3: [S3PackageManager updatePackage updateHandler onEnd catch] @{err}');\n\n        return onEnd(err);\n      }\n    })();\n  }\n\n  private async _getData(): Promise<unknown> {\n    this.logger.debug('s3: [S3PackageManager _getData init]');\n    return await new Promise((resolve, reject): void => {\n      this.s3.getObject(\n        {\n          Bucket: this.config.bucket,\n          Key: `${this.packagePath}/${pkgFileName}`,\n        },\n        (err, response) => {\n          if (err) {\n            this.logger.error({ err: err.message }, 's3: [S3PackageManager _getData] aws @{err}');\n            const error: HttpError = convertS3Error(err);\n            this.logger.error({ error: err.message }, 's3: [S3PackageManager _getData] @{error}');\n\n            reject(error);\n            return;\n          }\n          const body = response.Body ? response.Body.toString() : '';\n          let data;\n          try {\n            data = JSON.parse(body);\n          } catch (e) {\n            this.logger.error({ body }, 's3: [S3PackageManager _getData] error parsing: @{body}');\n            reject(e);\n            return;\n          }\n\n          this.logger.trace({ data }, 's3: [S3PackageManager _getData body] @{data.name}');\n          resolve(data);\n        }\n      );\n    });\n  }\n\n  public deletePackage(fileName: string, callback: Callback): void {\n    this.s3.deleteObject(\n      {\n        Bucket: this.config.bucket,\n        Key: `${this.packagePath}/${fileName}`,\n      },\n      err => {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null);\n        }\n      }\n    );\n  }\n\n  public removePackage(callback: CallbackAction): void {\n    deleteKeyPrefix(\n      this.s3,\n      {\n        Bucket: this.config.bucket,\n        Prefix: addTrailingSlash(this.packagePath),\n      },\n      function(err) {\n        if (err && is404Error(err as VerdaccioError)) {\n          callback(null);\n        } else {\n          callback(err);\n        }\n      }\n    );\n  }\n\n  public createPackage(name: string, value: Package, callback: CallbackAction): void {\n    this.logger.debug(\n      { name, packageName: this.packageName },\n      's3: [S3PackageManager createPackage init] name @{name}/@{packageName}'\n    );\n    this.logger.trace({ value }, 's3: [S3PackageManager createPackage init] name @value');\n    this.s3.headObject(\n      {\n        Bucket: this.config.bucket,\n        Key: `${this.packagePath}/${pkgFileName}`,\n      },\n      (err, data) => {\n        if (err) {\n          const s3Err = convertS3Error(err);\n          // only allow saving if this file doesn't exist already\n          if (is404Error(s3Err)) {\n            this.logger.debug({ s3Err }, 's3: [S3PackageManager createPackage] 404 package not found]');\n            this.savePackage(name, value, callback);\n            this.logger.trace({ data }, 's3: [S3PackageManager createPackage] package saved data from s3: @{data}');\n          } else {\n            this.logger.error({ s3Err: s3Err.message }, 's3: [S3PackageManager createPackage error] @s3Err');\n            callback(s3Err);\n          }\n        } else {\n          this.logger.debug('s3: [S3PackageManager createPackage ] package exist already');\n          callback(create409Error());\n        }\n      }\n    );\n  }\n\n  public savePackage(name: string, value: Package, callback: CallbackAction): void {\n    this.logger.debug(\n      { name, packageName: this.packageName },\n      's3: [S3PackageManager savePackage init] name @{name}/@{packageName}'\n    );\n    this.logger.trace({ value }, 's3: [S3PackageManager savePackage ] init value @{value}');\n    this.s3.putObject(\n      {\n        // TODO: not sure whether save the object with spaces will increase storage size\n        Body: JSON.stringify(value, null, '  '),\n        Bucket: this.config.bucket,\n        Key: `${this.packagePath}/${pkgFileName}`,\n        ACL: this.config.acl,\n      },\n      callback\n    );\n  }\n\n  public readPackage(name: string, callback: ReadPackageCallback): void {\n    this.logger.debug(\n      { name, packageName: this.packageName },\n      's3: [S3PackageManager readPackage init] name @{name}/@{packageName}'\n    );\n    (async (): Promise<void> => {\n      try {\n        const data: Package = (await this._getData()) as Package;\n        this.logger.trace(\n          { data, packageName: this.packageName },\n          's3: [S3PackageManager readPackage] packageName: @{packageName} / data @{data}'\n        );\n        callback(null, data);\n      } catch (err: any) {\n        this.logger.error({ err: err.message }, 's3: [S3PackageManager readPackage] @{err}');\n        callback(err);\n      }\n    })();\n  }\n\n  public writeTarball(name: string): UploadTarball {\n    this.logger.debug(\n      { name, packageName: this.packageName },\n      's3: [S3PackageManager writeTarball init] name @{name}/@{packageName}'\n    );\n    const uploadStream = new UploadTarball({});\n\n    let streamEnded = 0;\n    uploadStream.on('end', () => {\n      this.logger.debug(\n        { name, packageName: this.packageName },\n        's3: [S3PackageManager writeTarball event: end] name @{name}/@{packageName}'\n      );\n      streamEnded = 1;\n    });\n\n    const baseS3Params = {\n      Bucket: this.config.bucket,\n      Key: `${this.packagePath}/${name}`,\n    };\n\n    // NOTE: I'm using listObjectVersions so I don't have to download the full object with getObject.\n    // Preferably, I'd use getObjectMetadata or getDetails when it's available in the node sdk\n    // TODO: convert to headObject\n    this.s3.headObject(\n      {\n        Bucket: this.config.bucket,\n        Key: `${this.packagePath}/${name}`,\n      },\n      err => {\n        if (err) {\n          const convertedErr = convertS3Error(err);\n          this.logger.error({ error: convertedErr.message }, 's3: [S3PackageManager writeTarball headObject] @{error}');\n\n          if (is404Error(convertedErr) === false) {\n            this.logger.error(\n              {\n                error: convertedErr.message,\n              },\n              's3: [S3PackageManager writeTarball headObject] non a 404 emit error: @{error}'\n            );\n\n            uploadStream.emit('error', convertedErr);\n          } else {\n            this.logger.debug('s3: [S3PackageManager writeTarball managedUpload] init stream');\n            const managedUpload = this.s3.upload(\n              Object.assign({}, baseS3Params, { Body: uploadStream, ACL: this.tarballACL })\n            );\n            // NOTE: there's a managedUpload.promise, but it doesn't seem to work\n            const promise = new Promise<void>((resolve): void => {\n              this.logger.debug('s3: [S3PackageManager writeTarball managedUpload] send');\n              managedUpload.send((err, data) => {\n                if (err) {\n                  const error: HttpError = convertS3Error(err);\n                  this.logger.error(\n                    { error: error.message },\n                    's3: [S3PackageManager writeTarball managedUpload send] emit error @{error}'\n                  );\n\n                  uploadStream.emit('error', error);\n                } else {\n                  this.logger.trace(\n                    { data },\n                    's3: [S3PackageManager writeTarball managedUpload send] response @{data}'\n                  );\n\n                  resolve();\n                }\n              });\n\n              this.logger.debug({ name }, 's3: [S3PackageManager writeTarball uploadStream] emit open @{name}');\n              uploadStream.emit('open');\n            });\n\n            uploadStream.done = (): void => {\n              const onEnd = async (): Promise<void> => {\n                try {\n                  await promise;\n\n                  this.logger.debug('s3: [S3PackageManager writeTarball uploadStream done] emit success');\n                  uploadStream.emit('success');\n                } catch (err) {\n                  // already emitted in the promise above, necessary because of some issues\n                  // with promises in jest\n                  this.logger.error({ err }, 's3: [S3PackageManager writeTarball uploadStream done] error @{err}');\n                }\n              };\n              if (streamEnded) {\n                this.logger.trace(\n                  { name },\n                  's3: [S3PackageManager writeTarball uploadStream] streamEnded true @{name}'\n                );\n                onEnd();\n              } else {\n                this.logger.trace(\n                  { name },\n                  's3: [S3PackageManager writeTarball uploadStream] streamEnded false emit end @{name}'\n                );\n                uploadStream.on('end', onEnd);\n              }\n            };\n\n            uploadStream.abort = (): void => {\n              this.logger.debug('s3: [S3PackageManager writeTarball uploadStream abort] init');\n              try {\n                this.logger.debug('s3: [S3PackageManager writeTarball managedUpload abort]');\n                managedUpload.abort();\n              } catch (err: any) {\n                const error: HttpError = convertS3Error(err);\n                uploadStream.emit('error', error);\n\n                this.logger.error(\n                  { error },\n                  's3: [S3PackageManager writeTarball uploadStream error] emit error @{error}'\n                );\n              } finally {\n                this.logger.debug(\n                  { name, baseS3Params },\n                  's3: [S3PackageManager writeTarball uploadStream abort] s3.deleteObject @{name}/@{baseS3Params}'\n                );\n\n                this.s3.deleteObject(baseS3Params);\n              }\n            };\n          }\n        } else {\n          this.logger.debug({ name }, 's3: [S3PackageManager writeTarball headObject] emit error @{name} 409');\n\n          uploadStream.emit('error', create409Error());\n        }\n      }\n    );\n\n    return uploadStream;\n  }\n\n  public readTarball(name: string): ReadTarball {\n    this.logger.debug(\n      { name, packageName: this.packageName },\n      's3: [S3PackageManager readTarball init] name @{name}/@{packageName}'\n    );\n    const readTarballStream = new ReadTarball({});\n\n    const request = this.s3.getObject({\n      Bucket: this.config.bucket,\n      Key: `${this.packagePath}/${name}`,\n    });\n\n    let headersSent = false;\n\n    const readStream = request\n      .on('httpHeaders', (statusCode, headers) => {\n        // don't process status code errors here, we'll do that in readStream.on('error'\n        // otherwise they'll be processed twice\n\n        // verdaccio force garbage collects a stream on 404, so we can't emit more\n        // than one error or it'll fail\n        // https://github.com/verdaccio/verdaccio/blob/c1bc261/src/lib/storage.js#L178\n        this.logger.debug(\n          { name, packageName: this.packageName },\n          's3: [S3PackageManager readTarball httpHeaders] name @{name}/@{packageName}'\n        );\n        this.logger.trace({ headers }, 's3: [S3PackageManager readTarball httpHeaders event] headers @headers');\n        this.logger.trace(\n          { statusCode },\n          's3: [S3PackageManager readTarball httpHeaders event] statusCode @{statusCode}'\n        );\n        if (statusCode !== HTTP_STATUS.NOT_FOUND) {\n          if (headers[HEADERS.CONTENT_LENGTH]) {\n            const contentLength = parseInt(headers[HEADERS.CONTENT_LENGTH], 10);\n\n            // not sure this is necessary\n            if (headersSent) {\n              return;\n            }\n\n            headersSent = true;\n\n            this.logger.debug('s3: [S3PackageManager readTarball readTarballStream event] emit content-length');\n            readTarballStream.emit(HEADERS.CONTENT_LENGTH, contentLength);\n            // we know there's content, so open the stream\n            readTarballStream.emit('open');\n            this.logger.debug('s3: [S3PackageManager readTarball readTarballStream event] emit open');\n          }\n        } else {\n          this.logger.trace('s3: [S3PackageManager readTarball httpHeaders event] not found, avoid emit open file');\n        }\n      })\n      .createReadStream();\n\n    readStream.on('error', err => {\n      const error: HttpError = convertS3Error(err as AWSError);\n\n      readTarballStream.emit('error', error);\n      this.logger.error(\n        { error: error.message },\n        's3: [S3PackageManager readTarball readTarballStream event] error @{error}'\n      );\n    });\n\n    this.logger.trace('s3: [S3PackageManager readTarball readTarballStream event] pipe');\n    readStream.pipe(readTarballStream);\n\n    readTarballStream.abort = (): void => {\n      this.logger.debug('s3: [S3PackageManager readTarball readTarballStream event] request abort');\n      request.abort();\n      this.logger.debug('s3: [S3PackageManager readTarball readTarballStream event] request destroy');\n      readStream.destroy();\n    };\n\n    return readTarballStream;\n  }\n}\n"],"file":"s3PackageManager.js"}