{"version":3,"sources":["../src/s3Errors.ts"],"names":["is404Error","err","code","HTTP_STATUS","NOT_FOUND","create404Error","is409Error","CONFLICT","create409Error","is503Error","SERVICE_UNAVAILABLE","create503Error","convertS3Error","API_ERROR","CONTENT_MISMATCH","statusCode","message"],"mappings":";;;;;;;;;;;;;AACA;;AAUO,SAASA,UAAT,CAAoBC,GAApB,EAAkD;AACvD,SAAOA,GAAG,CAACC,IAAJ,KAAaC,wBAAYC,SAAhC;AACD;;AAEM,SAASC,cAAT,GAA0C;AAC/C,SAAO,6BAAY,2BAAZ,CAAP;AACD;;AAEM,SAASC,UAAT,CAAoBL,GAApB,EAAkD;AACvD,SAAOA,GAAG,CAACC,IAAJ,KAAaC,wBAAYI,QAAhC;AACD;;AAEM,SAASC,cAAT,GAA0C;AAC/C,SAAO,6BAAY,qBAAZ,CAAP;AACD;;AAEM,SAASC,UAAT,CAAoBR,GAApB,EAAkD;AACvD,SAAOA,GAAG,CAACC,IAAJ,KAAaC,wBAAYO,mBAAhC;AACD;;AAEM,SAASC,cAAT,GAA0C;AAC/C,SAAO,yBAAQR,wBAAYO,mBAApB,EAAyC,kCAAzC,CAAP;AACD;;AAEM,SAASE,cAAT,CAAwBX,GAAxB,EAAuD;AAC5D,UAAQA,GAAG,CAACC,IAAZ;AACE,SAAK,WAAL;AACA,SAAK,UAAL;AACE,aAAO,8BAAP;;AACF,SAAK,6BAAL;AACE,aAAO,kCAAiBW,sBAAUC,gBAA3B,CAAP;;AACF,SAAK,qBAAL;AACE,aAAO,kCAAiB,iBAAjB,CAAP;;AACF;AACE;AACA,aAAO,yBAAQb,GAAG,CAACc,UAAZ,EAAwBd,GAAG,CAACe,OAA5B,CAAP;AAVJ;AAYD","sourcesContent":["import { AWSError } from 'aws-sdk';\nimport {\n  getNotFound,\n  getCode,\n  getInternalError,\n  getConflict,\n  API_ERROR,\n  HTTP_STATUS,\n  VerdaccioError,\n} from '@verdaccio/commons-api';\n\nexport function is404Error(err: VerdaccioError): boolean {\n  return err.code === HTTP_STATUS.NOT_FOUND;\n}\n\nexport function create404Error(): VerdaccioError {\n  return getNotFound('no such package available');\n}\n\nexport function is409Error(err: VerdaccioError): boolean {\n  return err.code === HTTP_STATUS.CONFLICT;\n}\n\nexport function create409Error(): VerdaccioError {\n  return getConflict('file already exists');\n}\n\nexport function is503Error(err: VerdaccioError): boolean {\n  return err.code === HTTP_STATUS.SERVICE_UNAVAILABLE;\n}\n\nexport function create503Error(): VerdaccioError {\n  return getCode(HTTP_STATUS.SERVICE_UNAVAILABLE, 'resource temporarily unavailable');\n}\n\nexport function convertS3Error(err: AWSError): VerdaccioError {\n  switch (err.code) {\n    case 'NoSuchKey':\n    case 'NotFound':\n      return getNotFound();\n    case 'StreamContentLengthMismatch':\n      return getInternalError(API_ERROR.CONTENT_MISMATCH);\n    case 'RequestAbortedError':\n      return getInternalError('request aborted');\n    default:\n      // @ts-ignore\n      return getCode(err.statusCode, err.message);\n  }\n}\n"],"file":"s3Errors.js"}